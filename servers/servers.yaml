Description: >
  Udacity DevOps nanodegree \
  Project: Deploy a high-availability web app using CloudFormation \
  Servers | Security | Load-Balance configuration \
  By: Cristian Rodriguez

Parameters:
  EnvironmentName:
    Description: EnvironmentName that will be prefixed to resources
    Type: String

  # ServersMinSize:
  #   Description: Minimun Servers Capacity
  #   Type: String
  #   Default: "2"

  # ServersMaxSize:
  #   Description: Maximum Servers Capacity
  #   Type: String
  #   Default: "5"

  # ServersDesiredCpacity:
  #   Description: Desired Servers Capacity
  #   Type: String
  #   Default: "3"

  # S3PatchToBucket:
  #   Description: Path to static file on S3 Bucket
  #   Type: String
  #   Default: "s3//s3-udagram-zip-cloud-devops"

  # KeyPairBastion:
  #   Description: Key-Pair for SSH to bastion Host
  #   Type: String
  #   Default: "BastionKey"

  # KeyPairPrivate:
  #   Description: Key-Pair for SSH to private server through bastion host
  #   Type: String
  #   Default: "PrivateKey"

  # DNSProtocol:
  #   Description: An Dns protocol that will be prefixed to resources
  #   Type: String
  #   Default: "http://"

  # NetworkAccessIP:
  #   Description: Source that has SSH access to the bastion host
  #   Type: String
  #   Default: "0.0.0.0/0"

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  # WebServerSecGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security Groupn for the Web Server
  #     VpcId:
  #       Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         CidrIp: !Sub ${NetworkAccessIP}
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: !Sub ${NetworkAccessIP}
  #     SecurityGroupEgress:
  #       - IpProtocol: tcp
  #         FromPort: 0
  #         ToPort: 65535
  #         CidrIp: !Sub ${NetworkAccessIP}
  
#   WebAppLaunchConfig:
#     Type: AWS::AutoScaling::LaunchConfiguration
#     Properties:
#       UserData:
#         Fn::Base64: !Sub
#           #!/bin/bash
#           sudo apt-get update -y
#           sudo apt-get install unzip awscli -y
#           sudo apt-get install apache2 -y
#           sudo systemctl start apache2.service
#           sudo aws s3 cp s3://s3-udagram-zip-cloud-devops /var/www/html --recursive
#           cd /var/www/html
#           sudo rm -rf index.html
#           sudo unzip udacity-tamplate.zip
#           sudo rm -rf udacity-tamplate.zip
#           cd udacity-tamplate
#           sudo mv index.html home.css /var/www/html/
#           sudo rm -rf udacity-tamplate
#       ImageId: ami-0a634ae95e11c6f91
#       KeyName: !Ref KeyPairPrivate
#       IamInstanceProfile: !Ref IamInstanceProfile
#       SecurityGroups:
#       - Ref: WebServerSecGroup
#       InstanceType: t3.small
#       BlockDeviceMappings:
#       - DeviceName: "/dev/sdk"
#         Ebs:
#             VolumeSize: "10"
  
#   WebAppGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     Properties:
#       VPCZoneIdentifier:
#       - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
#       LaunchConfigurationName: !Ref WebAppLaunchConfig
#       DesiredCapacity: !Ref ServersDesiredCpacity
#       MaxSize: !Ref ServersMaxSize
#       MinSize: !Ref ServersMinSize
#       MetricsCollection:
#         - Granularity: "1Minute"
#           Metrics:
#             - "GroupMinSize"
#             - "GroupMaxSize"
#       TargetGroupARNs:
#       - Ref: WebAppTargetGroup
  
#   LoadBalancer:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Subnets:
#       - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
#       - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"
#       SecurityGroups:
#       - Ref: LBSecGroup
  
#   Listener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref WebAppTargetGroup
#       LoadBalancerArn: !Ref LoadBalancer
#       Port: "80"
#       Protocol: HTTP

#   ALBListenerRule:
#     Type: AWS::ElasticLoadBalancingV2::ListenerRule
#     Properties:
#       Actions:
#       - Type: forward
#         TargetGroupArn: !Ref WebAppTargetGroup
#       Conditions:
#       - Field: path-pattern
#         Values: [/] 
#       ListenerArn: !Ref Listener
#       Priority: 1

#   WebAppTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       HealthCheckIntervalSeconds: 60
#       HealthCheckPath: /
#       HealthCheckProtocol: HTTP
#       HealthCheckTimeoutSeconds: 30
#       HealthyThresholdCount: 2
#       Port: 80
#       Protocol: HTTP
#       UnhealthyThresholdCount: 10
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
  
#   IamRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#         - Effect: Allow
#           Principal:
#             Service:
#             - ec2.amazonaws.com
#           Action:
#           - sts:AssumeRole
#       Path: "/"
  
#   IamPolicies:
#     Type: AWS::IAM::Policy
#     Properties:
#       PolicyName: S3BucketsPolicy
#       PolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#         - Effect: Allow
#           Action: "s3:*"
#           Resource: "*"
#       Roles:
#       - !Ref IamRole
  
#   IamInstanceProfile:
#     Type: AWS::IAM::InstanceProfile
#     Properties:
#       Path: /
#       Roles:
#       - !Ref IamRole
  
#   BastionSecGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: SSH Access to Bastion Instance
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
#       SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 22
#         ToPort: 22
#         CidrIp: !Sub ${NetworkAccessIP}
#       - IpProtocol: icmp
#         FromPort: -1
#         ToPort: -1
#         CidrIp: !Sub ${NetworkAccessIP}
#       SecurityGroupEgress:
#       - IpProtocol: -1
#         CidrIp: 0.0.0.0/0
  
#   BastionInstance:
#     Type: AWS::EC2::Instance
#     DependsOn:
#     - BastionSecGroup
#     - IamInstanceProfile
#     Properties:
#       IamInstanceProfile: !Ref IamInstanceProfile
#       ImageId: ami-0a634ae95e11c6f91
#       InstanceType: t3.small
#       KeyName: !Ref KeyPairBastion
#       SecurityGroupIds:
#       - Ref: BastionSecGroup
#       - Ref: WebServerSecGroup
#       SubnetId: 
#         Fn::ImportValue: 
#           !Sub "${EnvironmentName}-PUB-SN-1"
  
#   EIP:
#     Type: AWS::EC2::EIP
#     Properties:
#       Domain: 
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
  
#   EIPAssociation:
#     Type: AWS::EC2::EIPAssociation
#     DependsOn:
#     - BastionInstance
#     - EIP
#     Properties:
#       InstanceId: 
#         Ref: BastionInstance
#       AllocationId: 
#         Fn::GetAtt:
#         - EIP
#         - AllocationId

# Outputs:
#   WebAppLB:
#     Description: A reference to the Loadbalancer DNS Name
#     Value: 
#       !Join
#       - ''
#       - - !Sub ${DNSProtocol}
#         - !GetAtt LoadBalancer.DNSName
#     Export:
#         Name: !Sub ${EnvironmentName}-LOADBALANCER-DNS